#pragma GCC optimize ("O0") // optimize on demand

/**
 * Source is based on ancient code and insights.
 * Code changes should be kept to an absolute minimum.
 * Don't be tempted...
 */

/**
 * `eval` is the reference implementation of the basic concepts of this project
 * and is therefore the authoritative outcome in cases of dispute during regression testing.
 *
 * It demonstrates:
 *   - Decoding en encoding of postfix notations
 *   - Constructing trees
 *   - Normalisations: inverting, function grouping, dyadic ordering
 *   - Caching
 *   - Evaluating
 *
 * @date 2020-03-06 16:56:25
 */

/*
 *	This file is part of Untangle, Information in fractal structures.
 *	Copyright (C) 2017-2020, xyzzy@rockingship.org
 *
 *	This program is free software: you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, either version 3 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#if 0
/**
 * Reference implementation on how to use the output generated by `"--code"`
 *
 * The first array entry is reserved for the reference value `null/zero/false`
 * The next 9 entries are the input endpoints
 * The remainder entries are the QTF nodes
 *
 * @date 2020-03-06 17:59:31
 */

#include <stdio.h>

int main() {
    for (unsigned a=0; a<2; a++)
    for (unsigned b=0; b<2; b++)
    for (unsigned c=0; c<2; c++) {

	int bit = ({ unsigned _[] = {0,a,b,c, _[1]?_[2]:!_[3] }; !_[4];});

	printf("%d", bit);
    }
    printf("%d\n");

    return 0;
}
#endif

#include <stdint.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <getopt.h>

/**
 * Constants
 */

#define MAXSLOTS 9               /** @constant {number} MAXSLOTS - Maximum number of slots/variables for the evaluator */
#define IBIT 0x80000000          /** @constant {number} IBIT - Which bit of the operand is reserved to flag that the result needs to be inverted */
#define NUMNODES 999             /** @constant {number} NUMNODES - Maximum number of nodes the tree can contain */
#define KSTART 1                 /** @constant {number} KSTART - Starting index in tree where to find the input endpoints. */
#define SBUFMAX (10 * NUMNODES)  /** @constant {number} SBUFMAX - Maximum size of constructed notation. Roughly assuming 3 characters per operand and operator */
//#define NSTART (KSTART+MAXSLOTS) /** @constant {number} NSTART - Starting index in tree for QTF nodes. The evaluator starts from this position */
#define QUADPERFOOTPRINT ((1 << MAXSLOTS) / 64) /** @constant {number} QUADPERFOOTPRINT - Size of footprint in terms of uint64_t */

/**
 * User specified program options
 */

unsigned opt_quiet = 0;     /** @global {number} opt_quiet - --quiet */
unsigned opt_verbose = 0;   /** @global {number} opt_verbose - --verbose */
unsigned opt_normalise = 0; /** @global {number} opt_normalise - --normalise, display notation with placeholders as endpoints and transform mapping */
unsigned opt_code = 0;      /** @global {number} opt_code - --code, output tree as gcc statement expression */
unsigned opt_raw = 0;       /** @global {number} opt_raw - --raw, do not normalised input */
unsigned opt_qntf = 0;      /** @global {number} opt_qntf - --qntf, output exclusively as QnTF */
unsigned opt_seed = 1;      /** @global {number} opt_seed - --seed=n, Random seed to generate evaluator test pattern */
unsigned opt_Q = 0;         /** @global {number} opt_Q - --Q, Select the `"question"` part of the top-level node */
unsigned opt_T = 0;         /** @global {number} opt_T - --T, Select the `"when-true"` part of the top-level node */
unsigned opt_F = 0;         /** @global {number} opt_F - --F, Select the `"when-false"` part of the top-level node */

/**
 * Program usage. Keep high in source code for easy reference
 *
 * @param {string[]} argv - program arguments
 * @param {boolean} verbose - set to true for option descriptions
 * @date  2020-03-06 21:06:01
 */
void usage(char *const *argv, bool verbose) {
	fprintf(stderr, "usage: %s <pattern> ...\n", argv[0]);
	if (verbose) {
		fprintf(stderr, "\t-q --quiet\n");
		fprintf(stderr, "\t-v --verbose\n");
		fprintf(stderr, "\t-n --normalise  Display notation with placeholders as endpoints and transform mapping\n");
		fprintf(stderr, "\t-c --code       Output tree as gcc statement expression\n");
		fprintf(stderr, "\t   --raw        Do not normalise input\n");
		fprintf(stderr, "\t   --qntf       Output exclusively as QnTF\n");
		fprintf(stderr, "\t   --seed=n     Random seed to generate evaluator test pattern. [Default=%d]\n", opt_seed);
		fprintf(stderr, "\t-Q --Q          Select top-level Q\n");
		fprintf(stderr, "\t-T --T          Select top-level T\n");
		fprintf(stderr, "\t-F --F          Select top-level F\n");
	}
}

/**
 * struct representing a 512 bit vector, each bit representing the outcome of the unified operator for every possible state 9 variables can take
 * The vector is split into a collection of 64bit wide words.
 *
 * Test vectors are also used to compare equality of two trees
 *
 * As this is a reference implementation, `SIMD` instructions should be avoided.
 *
 * @date 2020-03-06 23:23:32
 */
struct footprint_t {
	uint64_t bits[QUADPERFOOTPRINT]; // = 512/64 = 8 = QUADPERFOOTPRINT
};

/**
 * Language structure representing the unified operator
 *
 * @date 2020-03-06 21:14:47
 */
struct node_t {
	uint32_t Q; /** @var {number} Q - tree index to `"question"` */
	uint32_t T; /** @var {number} T - tree index to `"when-true"` */
	uint32_t F; /** @var {number} F - tree index to `"when-false"` */
};

/**
 * Language structure representing the fractal tree
 *
 * @date 2020-03-06 21:45:08
 */
struct tree_t {

	uint32_t kstart; /** @var {number} - index of first endpoint */
	uint32_t nstart; /** @var {number} - index of first node */
	uint32_t count;  /** @var {number} - first free index */

	node_t N[NUMNODES];  /** @var {object[]} - array of unified operators */
	uint32_t root;   /** @var {number} - entrypoint/index where the result can be found */

	/**
	 * Constructor
	 *
	 * @param {number} kstart - index of first endpoint
 	 * @param {number} kstart - nstart of first node
	 * @param {number} nend - size of tree (depreciated)
 	 * @date 2020-03-06 21:46:08
	 */

	inline tree_t(uint32_t kstart, uint32_t nstart)
		: kstart(kstart), nstart(nstart), count(nstart) {
	}

	/**
	 * Copy constructor
	 *
	 * @param {object} rhs - right hans side of assignment
	 * @return {object} deep copy of object
	 * @date 2020-03-06 22:30:00
	 */
	inline tree_t(const tree_t &rhs) {
		assert(!"copy constructor not supported");
	}

	/**
	 * Assignment operator
	 *
	 * @param {object} rhs - right hans side of assignment
	 * @return {object} deep copy of object
	 * @date 2020-03-06 21:47:08
	 */
	inline tree_t &operator=(const tree_t &rhs) {
		assert(!"assignment constructor not supported");

		// first members
		this->kstart = rhs.kstart;
		this->nstart = rhs.nstart;
		this->count = rhs.count;

		// then nodes
		for (uint32_t i = rhs.nstart; i < count; i++)
			this->N[i] = rhs.N[i];

		// roots last
		this->root = rhs.root;

		return *this;
	}

	/**
	 * Erase the contents
	 *
	 * @date 2020-03-06 22:27:36
	 */
	inline void clear(void) {
		this->count = this->nstart; // rewind first free node
		this->root = 0; // set result to zero-reference
	}

	/**
	 * scan notation, find highest endpoint and decode optional transform
	 *
	 * @param {string} pPattern - notation and transform separated by '/'
	 * @param {number[1]} pHighestEndpoint - return highest found endpoint in either notation or transform
	 * @param {number[1]} pNumTransform - return number of transforms. This might be higher than the number of placeholder endpoints
	 * @param {number[]} pTransform - decoded list transforms
	 * @date 2020-03-09 10:31:50
	 */
	void decodeHighestEndpoint(const char *pPattern, uint32_t *pHighestEndpoint, uint32_t *pNumTransform, uint32_t *pTransform) const {

		uint32_t prefix = 0; // current prefix
		uint32_t highestEndpoint = 0; // highest endpoints
		uint32_t numTransform = 0; // number of transforms

		/*
		 * walk through the notation until end or until pattern/transform separator
		 */
		for (; *pPattern != 0 && *pPattern != '/'; pPattern++) {

			// skip spaces
			if (isspace(*pPattern))
				continue;

			// test for prefix/endpoint
			if (isupper(*pPattern)) {
				// expand prefix
				prefix = prefix * 26 + *pPattern - 'A';

			} else if (islower(*pPattern)) {
				// endpoint
				uint32_t ep = prefix * 26 + *pPattern - 'a';

				// remember highest
				if (ep > highestEndpoint)
					highestEndpoint = ep;

				// reset prefix
				prefix = 0;

			} else {
				// something else
				prefix = 0;
			}
		}

		/*
		 * test for separator
		 */
		if (*pPattern != '/') {
			// missing separator
			*pHighestEndpoint = highestEndpoint; // highest endpoint in basic notation
			*pNumTransform = 0; // no transform
			return;
		}

		/*
		 * decode the transform
		 */

		// skip separator
		pPattern++;
		// transform contains the final endpoints, reset highest
		highestEndpoint = 0;

		// walk through the notation until end
		for (; *pPattern != 0; pPattern++) {

			// skip spaces
			if (isspace(*pPattern))
				continue;

			// test for prefix/endpoint
			if (isupper(*pPattern)) {
				// expand prefix
				prefix = prefix * 26 + *pPattern - 'A';

			} else if (islower(*pPattern)) {
				// endpoint
				uint32_t ep = prefix * 26 + *pPattern - 'a';

				// store in binary transform map
				pTransform[numTransform++] = ep;

				// remember highest
				if (ep > highestEndpoint)
					highestEndpoint = ep;

				// reset prefix
				prefix = 0;

			} else {
				// something else
				prefix = 0;
			}
		}

		// return result
		*pHighestEndpoint = highestEndpoint; // highest endpoint in transform
		*pNumTransform = numTransform; // number of transforms
	}

	/**
	 * Perform level 1 normalisation on q `"Q,T,F"` triplet and add to the tree only when unique.
	 *
	 * Level 1 Normalisations include: inverting, function grouping, dyadic ordering and QnTF expanding.
	 *
	 * @param {number} Q
	 * @param {number} T
	 * @param {number} F
	 * @return {number} - index into the tree pointing to a node with identical functionality. May have `IBIT` set to indicate that the result is inverted.
	 * @date 2020-03-09 16:27:10
	 */
	uint32_t normaliseQTF(uint32_t Q, uint32_t T, uint32_t F) {

		/*
		 * Level 1a - Inverts
		 *
		 * ~q ?  t :  f  ->  q ? f : t
		 *  0 ?  t :  f  ->  f
		 *  q ?  t : ~f  ->  ~(q ? ~t : f)
		 */

		if (Q & IBIT) {
			// "~Q?T:F" -> "Q?F:T"
			uint32_t savT = T;
			T = F;
			F = savT;
			Q ^= IBIT;
		}
		if (Q == 0) {
			// "0?T:F" -> "F"
			return F;
		}

		// ibit indicates the result should be inverted
		uint32_t ibit = 0;

		if (F & IBIT) {
			// "Q?T:~F" -> "~(Q?~T:F)"
			F ^= IBIT;
			T ^= IBIT;
			ibit ^= IBIT;
		}

		/*
		 * Level 1b: Function grouping
		 *
		 * appreciated:
		 *
		 *  [ 0] a ? ~0 : 0  ->  a
		 *  [ 1] a ? ~0 : a  ->  a ? ~0 : 0
		 *  [ 2] a ? ~0 : b                  "+" or
		 *  [ 3] a ? ~a : 0  ->  0
		 *  [ 4] a ? ~a : a  ->  a ? ~a : 0
		 *  [ 5] a ? ~a : b  ->  b ? ~a : b
		 *  [ 6] a ? ~b : 0                  ">" greater-than
		 *  [ 7] a ? ~b : a  ->  a ? ~b : 0
		 *  [ 8] a ? ~b : b                  "^" xor/not-equal
		 *  [ 9] a ? ~b : c                  "!" QnTF
		 *
		 * depreciated:
		 *  [10] a ?  0 : 0 -> 0
		 *  [11] a ?  0 : a -> 0
		 *  [12] a ?  0 : b -> b ? ~a : 0    "<" less-than
		 *  [13] a ?  a : 0 -> a
		 *  [14] a ?  a : a -> a ?  a : 0
		 *  [15] a ?  a : b -> a ? ~0 : b
		 *  [16] a ?  b : 0                  "&" and
		 *  [17] a ?  b : a -> a ?  b : 0
		 *  [18] a ?  b : b -> b
		 *  [19] a ?  b : c                  "?" QTF
		 *
		 * ./eval --raw 'a00!' 'a0a!' 'a0b!' 'aa0!' 'aaa!' 'aab!' 'ab0!' 'aba!' 'abb!' 'abc!' 'a00?' 'a0a?' 'a0b?' 'aa0?' 'aaa?' 'aab?' 'ab0?' 'aba?' 'abb?' 'abc?'
		 */

		if (T & IBIT) {

			if (T == IBIT) {
				if (F == Q || F == 0) {
					// SELF
					// "Q?~0:Q" [1] -> "Q?~0:0" [0] -> Q
					return Q ^ ibit;
				} else {
					// OR
					// "Q?~0:F" [2]
					if (Q > F) {
						// swap
						uint32_t savQ = Q;
						Q = F;
						F = savQ;
					}
				}
			} else if ((T & ~IBIT) == Q) {
				if (F == Q || F == 0) {
					// ZERO
					// "Q?~Q:Q" [4] -> "Q?~Q:0" [3] -> "0"
					return 0 ^ ibit;
				} else {
					// LESS-THAN
					// "Q?~Q:F" [5] -> "F?~Q:F" -> "F?~Q:0"
					Q = F;
					F = 0;
				}
			} else {
				if (F == Q || F == 0) {
					// GREATER-THAN
					// "Q?~T:Q" [7] -> "Q?~T:0" [6]
					F = 0;
				} else if ((T & ~IBIT) == F) {
					// XOR/NOT-EQUAL
					// "Q?~F:F" [8]
				} else {
					// QnTF
					// "Q?~T:F" [9]
				}
			}

		} else {

			if (T == 0) {
				if (F == Q || F == 0) {
					// ZERO
					// "Q?0:Q" [11] -> "Q?0:0" [10] -> "0"
					return 0 ^ ibit;
				} else {
					// LESS-THAN
					// "Q?0:F" [12] -> "F?~Q:0" [6]
					T = Q ^ IBIT;
					Q = F;
					F = 0;
				}

			} else if (T == Q) {
				if (F == Q || F == 0) {
					// SELF
					// "Q?Q:Q" [14] -> Q?Q:0" [13] -> "Q"
					return Q ^ ibit;
				} else {
					// OR
					// "Q?Q:F" [15] -> "Q?~0:F" [2]
					T = 0 ^ IBIT;
				}
			} else {
				if (F == Q || F == 0) {
					// AND
					// "Q?T:Q" [17] -> "Q?T:0" [16]
					F = 0;
				} else if (T == F) {
					// SELF
					// "Q?F:F" [18] -> "F"
					return F ^ ibit;
				} else {
					// QTF
					// "Q?T:F" [19]
				}
			}
		}

		/*
		 * Level 1c - dyadic ordering
		 *
		 */

		// `AND` `Q?T:0` where Q>T
		if ((~T & IBIT) && F == 0 && Q > T) {
			// swap
			uint32_t savQ = Q;
			Q = T;
			T = savQ;
		}

		// `OR` `Q?~0:F` where Q>F
		if (T == IBIT && Q > F) {
			// swap
			uint32_t savQ = Q;
			Q = F;
			F = savQ;
		}

		// `XOR` `Q?~F:F` where Q>F
		if ((T ^ IBIT) == F && Q > F) {
			// swap
			uint32_t savQ = Q;
			Q = F;
			F = savQ;
			T = savQ ^ IBIT;
		}

		/*
		 * level 1d+ - This is where you would put additional normalisations
		 */


		/*
		 * Directly before caching, rewrite `QTF` to `QnTF`
		 *
		 * a ?  b : c -> a?~(a?~b:c):c  "?" QTF
		 *
		 * ./eval --qntf 'ab&' 'abc?'
		 */

		if (opt_qntf && (~T & IBIT)) {
			// QTF
			// Q?T:F -> Q?~(Q?~T:F):F)
			T = normaliseQTF(Q, T ^ IBIT, F) ^ IBIT;
		}

		// sanity checking
		if (true) {
			assert(~Q & IBIT);            // Q not inverted
			assert(~F & IBIT);            // F not inverted
			assert(Q != 0);               // Q not zero
			assert(T != 0);               // Q?0:F -> F?!Q:0
			assert(T != IBIT || F != 0);  // Q?!0:0 -> Q
			assert(Q != (T & ~IBIT));     // Q/T collapse
			assert(Q != F);               // Q/F collapse
			assert(T != F);               // T/F collapse
		}

		/*
		 * Extremely simple and slow sequential cache lookup
		 */

		// test if already cached
		for (uint32_t i = this->nstart; i < this->count; i++) {
			node_t *pNode = this->N + i;
			if (pNode->Q == Q && pNode->T == T && pNode->F == F)
				return i ^ ibit;
		}

		// create new entry
		uint32_t nid = this->count++;
		node_t *pNode = this->N + nid;

		// populate
		pNode->Q = Q;
		pNode->T = T;
		pNode->F = F;

		return nid ^ ibit;
	}

	/**
	 * Parse notation and construct tree accordingly.
	 * Notation is assumed to be normalised.
	 *
	 * Do not spend too much effort on detailing errors
	 *
	 * @param {string} pPattern - The notation describing the tree
	 * @param {number} numTransform - size of `pTransform[]`
	 * @param {number[]}} pTransform - zero based list of endpoint transforms
	 * @return non-zero when parsing failed
	 * @date 2020-03-09 17:05:36
	 */
	int decode(const char *pPattern, uint32_t numTransform, const uint32_t *pTransform) {

		// initialise tree
		this->count = this->nstart;
		this->root = 0;

		// initialise state
		nextNode = this->nstart;

		// temporary stack storage for postfix notation
		uint32_t stack[NUMNODES];
		int stackPos = 0;
		uint32_t prefix = 0;
		uint32_t nestStack[16];
		uint32_t nestStackPos = 0;


		// walk through the notation until end or until pattern/transform separator
		for (const char *pattern = pPattern; *pattern != 0 && *pattern != '/'; pattern++) {

			// skip spaces
			if (isspace(*pattern))
				continue;

			// test for prefix
			if (isupper(*pattern)) {
				prefix = prefix * 26 + *pattern - 'A';
				continue;
			}

			// test for endpoint
			if (islower(*pattern)) {
				// determine endpoint value
				uint32_t ep = prefix * 26 + *pattern - 'a'; // endpoint

				// test if placeholder
				if (numTransform != 0) {
					// range check
					if (ep >= numTransform) {
						printf("[placeholder out-of-range: %d]\n", ep);
						return 1;
					}

					// dereference placeholder
					ep = pTransform[ep];
				}

				// get final nodeId
				uint32_t nid = this->kstart + ep; // nodeId is endpoint relative to kstart

				// range check
				if (nid >= this->nstart) {
					printf("[endpoint out-of-range. nid=%d]\n", nid);
					return 1;
				}

				if (stackPos >= NUMNODES) {
					printf("[stack overflow]\n");
					return 1;
				}

				// reset prefix
				prefix = 0;

				// Push the index of the endpoint onto the stack
				stack[stackPos++] = nid;
				continue;
			}

			// test for back-reference
			// loading is non-normalised and each opcode symbol populates exactly one node making calculations fairly easy
			if (isdigit(*pattern)) {
				uint32_t nid; // node id

				// determine final value
				nid = prefix * 10 + *pattern - '0';

				// reset prefix
				prefix = 0;

				// range check
				if (stackPos >= NUMNODES) {
					printf("[stack overflow]\n");
					return 1;
				}

				// special case: '0' is actually zero
				if (nid == 0) {
					stack[stackPos++] = 0;
					continue;
				}

				// convert visual relative to visual absolute index
				nid = nextNode - nid;

				// rangecheck
				if (nid < this->nstart || nid >= nextNode) {
					printf("[back reference out-of-range. nid=%d]\n", nid);
					return 1;
				}

				/*
				 * NOTE: nid is the 'visual' back-reference.
				 * Node normalisation may effectively add/remove nodes runtime.
				 * `beenThere[]` maps visual id's to actual id's
				 */
				nid = beenThere[nid];

				// Push the index of the back reference onto the stack
				stack[stackPos++] = nid;
				continue;
			}

			// prefix must be zero
			if (prefix) {
				printf("[non-zero prefix]\n");
				return 1;
			}

			/*
			 * non-documented feature: opcodes `"("` and "`)"` to allow manual sub-tree substitution.
			 * It is not documented because it has no checks on validity.
			 *
			 * Given the tree `"ab+c&2>"`, the back-reference `"2"` points to `"ab+"`
			 *
			 * However, if `"c"` would be manually replaced by a smaller tree, the notation would break
			 * because the relative back-reference did not take into account the extra nodes.
			 *
			 * This is solved by placing the substition within parenthesis which restores back-reference offsets.
			 */
			if (*pattern == '(') {
				nestStack[nestStackPos++] = nextNode;
				continue;
			} else if (*pattern == ')') {
				nextNode = nestStack[--nestStackPos];
				continue;
			}

			// test if new operator will fit
			if (this->count >= NUMNODES) {
				printf("[tree too large]\n");
				return 1;
			}

			switch (*pattern) {
				case '>': {
					// GT (appreciated)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					//pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & ~IBIT) >= this->count || (R & ~IBIT) >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					uint32_t nid = normaliseQTF(L, R ^ IBIT, 0);

					// push
					stack[stackPos++] = nid;

					// save actual index for back references
					beenThere[nextNode++] = nid;
					break;
				}

				case '^': {
					// XOR (appreciated)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					//pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & ~IBIT) >= this->count || (R & ~IBIT) >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					uint32_t nid = normaliseQTF(L, R ^ IBIT, R);

					// push
					stack[stackPos++] = nid;

					// save actual index for back references
					beenThere[nextNode++] = nid;
					break;
				}

				case '+': {
					// OR (appreciated)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					// pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & ~IBIT) >= this->count || (R & ~IBIT) >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					uint32_t nid = normaliseQTF(L, 0 ^ IBIT, R);

					// push
					stack[stackPos++] = nid;

					// save actual index for back references
					beenThere[nextNode++] = nid;
					break;
				}

				case '!': {
					// QnTF (appreciated)
					if (stackPos < 3) {
						printf("[stack underflow]\n");
						return 1;
					}

					// pop operands
					uint32_t F = stack[--stackPos];
					uint32_t T = stack[--stackPos];
					uint32_t Q = stack[--stackPos];

					if ((Q & ~IBIT) >= this->count || (T & ~IBIT) >= this->count || (F & ~IBIT) >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					uint32_t nid = normaliseQTF(Q, T ^ IBIT, F);

					// push
					stack[stackPos++] = nid;

					// save actual index for back references
					beenThere[nextNode++] = nid;
					break;
				}

				case '&': {
					// AND (depreciated)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					// pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & ~IBIT) >= this->count || (R & ~IBIT) >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					uint32_t nid = normaliseQTF(L, R, 0);

					// push
					stack[stackPos++] = nid;

					// save actual index for back references
					beenThere[nextNode++] = nid;
					break;
				}

				case '?': {
					// QTF (depreciated)
					if (stackPos < 3) {
						printf("[stack underflow]\n");
						return 1;
					}

					// pop operands
					uint32_t F = stack[--stackPos];
					uint32_t T = stack[--stackPos];
					uint32_t Q = stack[--stackPos];

					if ((Q & ~IBIT) >= this->count || (T & ~IBIT) >= this->count || (F & ~IBIT) >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					uint32_t nid = normaliseQTF(Q, T, F);

					// push
					stack[stackPos++] = nid;

					// save actual index for back references
					beenThere[nextNode++] = nid;
					break;
				}

				case '~': {
					// NOT (support)
					if (stackPos < 1) {
						printf("[stack underflow]\n");
						return 1;
					}

					// invert top-of-stack
					stack[stackPos - 1] ^= IBIT;

					break;
				}

				case '<': {
					// LT (support)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					//pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & ~IBIT) >= this->count || (R & ~IBIT) >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					uint32_t nid = normaliseQTF(L, 0, R);

					// push
					stack[stackPos++] = nid;

					// save actual index for back references
					beenThere[nextNode++] = nid;
					break;
				}

				default:
					printf("[bad token: %c]\n", *pattern);
					return 1;
			}
		}

		if (stackPos != 1) {
			printf("[unbalanced]\n");
			return 1;
		}

		// store result into root
		this->root = stack[stackPos - 1];
		return 0;
	}

	/**
	 * Parse notation and construct tree accordingly.
	 * Notation is taken literally and not normalised
	 *
	 * Do not spend too much effort on detailing errors
	 *
	 * @param {string} pPattern - The notation describing the tree
	 * @param {number} numTransform - size of `pTransform[]`
	 * @param {number[]}} pTransform - zero based list of endpoint transforms
	 * @return non-zero when parsing failed
	 * @date 2020-03-07 00:12:44
	 */
	int decodeRaw(const char *pPattern, uint32_t numTransform, const uint32_t *pTransform) {

		// initialise tree
		this->count = this->nstart;
		this->root = 0;

		// temporary stack storage for postfix notation
		uint32_t stack[NUMNODES];
		int stackPos = 0;
		uint32_t prefix = 0;

		// walk through the notation until end or until pattern/transform separator
		for (const char *pattern = pPattern; *pattern != 0 && *pattern != '/'; pattern++) {

			// skip spaces
			if (isspace(*pattern))
				continue;

			// test for prefix
			if (isupper(*pattern)) {
				prefix = prefix * 26 + *pattern - 'A';
				continue;
			}

			// test for endpoint
			if (islower(*pattern)) {
				// determine endpoint value
				uint32_t ep = prefix * 26 + *pattern - 'a'; // endpoint

				// test if placeholder
				if (numTransform != 0) {
					// range check
					if (ep >= numTransform) {
						printf("[placeholder out-of-range: %d]\n", ep);
						return 1;
					}

					// dereference placeholder
					ep = pTransform[ep];
				}

				// get final nodeId
				uint32_t nid = this->kstart + ep; // nodeId is endpoint relative to kstart

				// range check
				if (nid >= this->nstart) {
					printf("[endpoint out-of-range. nid=%d]\n", nid);
					return 1;
				}

				if (stackPos >= NUMNODES) {
					printf("[stack overflow]\n");
					return 1;
				}

				// reset prefix
				prefix = 0;

				// Push the index of the endpoint onto the stack
				stack[stackPos++] = nid;
				continue;
			}

			// test for back-reference
			// loading is non-normalised and each opcode symbol populates exactly one node making calculations fairly easy
			if (isdigit(*pattern)) {
				uint32_t nid; // node id

				// determine final value
				nid = prefix * 10 + *pattern - '0';

				// reset prefix
				prefix = 0;

				// range check
				if (stackPos >= NUMNODES) {
					printf("[stack overflow]\n");
					return 1;
				}

				// special case: '0' is actually zero
				if (nid == 0) {
					stack[stackPos++] = 0;
					continue;
				}

				// convert relative to absolute index
				nid = this->count - nid;

				// rangecheck
				if (nid < this->nstart || nid >= this->count) {
					printf("[back reference out-of-range. nid=%d]\n", nid);
					return 1;
				}

				// Push the index of the back reference onto the stack
				stack[stackPos++] = nid;
				continue;
			}

			// prefix must be zero
			if (prefix) {
				printf("[non-zero prefix]\n");
				return 1;
			}

			// test if new operator will fit
			if (this->count >= NUMNODES) {
				printf("[tree too large]\n");
				return 1;
			}

			switch (*pattern) {
				case '>': {
					// GT (appreciated)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					//pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & IBIT) || (R & IBIT)) {
						printf("[invert not normalised]\n");
						return 1;
					}
					if (L >= this->count || R >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					this->N[this->count].Q = L;
					this->N[this->count].T = R ^ IBIT;
					this->N[this->count].F = 0;

					// push
					stack[stackPos++] = this->count++;
					break;
				}

				case '^': {
					// XOR (appreciated)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					//pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & IBIT) || (R & IBIT)) {
						printf("[invert not normalised]\n");
						return 1;
					}
					if (L >= this->count || R >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					this->N[this->count].Q = L;
					this->N[this->count].T = R ^ IBIT;
					this->N[this->count].F = R;

					// push
					stack[stackPos++] = this->count++;
					break;
				}

				case '+': {
					// OR (appreciated)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					// pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & IBIT) || (R & IBIT)) {
						printf("[invert not normalised]\n");
						return 1;
					}
					if (L >= this->count || R >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					this->N[this->count].Q = L;
					this->N[this->count].T = 0 ^ IBIT;
					this->N[this->count].F = R;

					// push
					stack[stackPos++] = this->count++;
					break;
				}

				case '!': {
					// QnTF (appreciated)
					if (stackPos < 3) {
						printf("[stack underflow]\n");
						return 1;
					}

					// pop operands
					uint32_t F = stack[--stackPos];
					uint32_t T = stack[--stackPos];
					uint32_t Q = stack[--stackPos];

					if ((Q & IBIT) || (T & IBIT) || (F & IBIT)) {
						printf("[invert not normalised]\n");
						return 1;
					}
					if (Q >= this->count || T >= this->count || F >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					this->N[this->count].Q = Q;
					this->N[this->count].T = T ^ IBIT;
					this->N[this->count].F = F;

					// push
					stack[stackPos++] = this->count++;
					break;
				}

				case '&': {
					// AND (depreciated)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					// pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & IBIT) || (R & IBIT)) {
						printf("[invert not normalised]\n");
						return 1;
					}
					if (L >= this->count || R >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					this->N[this->count].Q = L;
					this->N[this->count].T = R;
					this->N[this->count].F = 0;

					// push
					stack[stackPos++] = this->count++;
					break;
				}

				case '?': {
					// QTF (depreciated)
					if (stackPos < 3) {
						printf("[stack underflow]\n");
						return 1;
					}

					// pop operands
					uint32_t F = stack[--stackPos];
					uint32_t T = stack[--stackPos];
					uint32_t Q = stack[--stackPos];

					if ((Q & IBIT) || (T & IBIT) || (F & IBIT)) {
						printf("[invert not normalised]\n");
						return 1;
					}
					if (Q >= this->count || T >= this->count || F >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					this->N[this->count].Q = Q;
					this->N[this->count].T = T;
					this->N[this->count].F = F;

					// push
					stack[stackPos++] = this->count++;
					break;
				}

				case '~': {
					// NOT (support)
					if (stackPos < 1) {
						printf("[stack underflow]\n");
						return 1;
					}

					// invert top-of-stack
					stack[stackPos - 1] ^= IBIT;

					break;
				}

				case '<': {
					// LT (support)
					if (stackPos < 2) {
						printf("[stack underflow]\n");
						return 1;
					}

					//pop operands
					uint32_t R = stack[--stackPos]; // right hand side
					uint32_t L = stack[--stackPos]; // left hand side

					if ((L & IBIT) || (R & IBIT)) {
						printf("[invert not normalised]\n");
						return 1;
					}
					if (L >= this->count || R >= this->count) {
						printf("[operand out-of-range]\n");
						return 1;
					}

					// create operator
					this->N[this->count].Q = L;
					this->N[this->count].T = 0;
					this->N[this->count].F = R;

					// push
					stack[stackPos++] = this->count++;
					break;
				}

				default:
					printf("[bad token: %c]\n", *pattern);
					return 1;
			}
		}

		if (stackPos != 1) {
			printf("[unbalanced]\n");
			return 1;
		}

		// store result into root
		this->root = stack[stackPos - 1];
		return 0;
	}


	/**
	 * Composing the tree notation requires state information
	 *
	 * @date 2020-03-07 15:31:50
         */
	uint32_t nextPlaceholder;           /** @var {number} nextSlot - First free placeholder, or zero for no placeholder/transform mapping */
	uint32_t nextNode;                  /** @var {number} nextLink - First free node */
	char sbuf[SBUFMAX];                 /** @var {string} sbuf - Storage for notation */
	unsigned spos;                      /** @var {number} spos - length of notation */
	uint32_t beenThere[NUMNODES];       /** @var {number[]} beenThere - for endpoints the placeholder/transform index, for nodes the nodeId of already emitted notations */
	uint32_t beenPlaceholder[NUMNODES]; /** @var {number[]} beenMap - the actual nodeId indexed by endpoint placeholder */
	bool placeholdersInSync;            /** @var {boolean} placeholderInSync - non-zero if placeholders are in sync with transform */

	/**
	 * Encode the tree index of a given node in "base/transform" notation.
	 * for endpoints (id < nstart) emit placeholder as index to `pTransform` containing actual endpoint
	 * for nodes (id >= nstart) emit back reference reflecting the relative distance
	 *
	 * Optionally prefix endpoint/node with base26 prefix consisting of capital letters
	 *
	 * NOTE: uses recursion which might break on extremely large trees, which is not expected for this program.
	 *
	 * @param {number} id - index of node to encode
	 * @date 2020-03-08 22:26:23
	 */
	void encodeOperand(uint32_t id) {

		if (id == 0) {
			// may happen with non-normalised nodes like `"q?~0:0"`
			assert(spos + 1 < SBUFMAX - 1);
			sbuf[spos++] = '0';

		} else if (id < this->kstart) {
			// all operands must be >= KSTART
			assert(0);

		} else if (id < this->nstart) {

			// On first encounter assign new placeholder
			if (beenThere[id] == 0) {
				if (nextPlaceholder == 0) {
					// no placeholder/transform
					beenThere[id] = id;
				} else {
					// save nodeId in transform
					beenPlaceholder[nextPlaceholder] = id;

					// test if placeholders are still in sync
					if (id != nextPlaceholder)
						placeholdersInSync = false; // out of sync

					// save transform index as endpoint placeholder
					beenThere[id] = nextPlaceholder++;
				}
			}

			// endpoints are notated as a lowercase letter (`'a'` resembling KSTART) base26 prefixed by uppercase letters
			char prefixStack[16];
			int prefixStackPos = 0;

			// zero-based copy of placeholder
			uint32_t v = beenThere[id] - this->kstart;

			// base26 encoded endpoint
			prefixStack[prefixStackPos++] = (char) ('a' + (v % 26));
			v /= 26;
			// base26 encoded prefix
			while (v) {
				prefixStack[prefixStackPos++] = (char) ('A' + (v % 26));
				v /= 26;
			}

			// test if fits
			assert(spos + prefixStackPos + 1 < SBUFMAX - 1);

			// add to notation
			while (prefixStackPos)
				sbuf[spos++] = prefixStack[--prefixStackPos];

		} else if (beenThere[id] != 0) {

			// already been there. Calculate the back-reference
			uint32_t v = nextNode - beenThere[id];

			// back-references are notated as a non-zero digit base26 prefixed by uppercase letters
			char prefixStack[16];
			int prefixStackPos = 0;

			// base10 encoded back-reference
			prefixStack[prefixStackPos++] = (char) ('0' + (v % 10));
			v /= 10;
			// base26 encoded prefix
			while (v) {
				prefixStack[prefixStackPos++] = (char) ('A' + (v % 26));
				v /= 26;
			}

			// test if fits
			assert(spos + prefixStackPos + 1 < SBUFMAX - 1);

			// add to notation
			while (prefixStackPos)
				sbuf[spos++] = prefixStack[--prefixStackPos];

		} else {

			// call recursive encode for node
			encodeQTF(id);

		}
	}

	/**
	 * Compose the notation of a given node in "base/transform" notation.
	 *
	 * @param {number} id - index of node to encode
	 * @date 2020-03-08 20:52:41
	 */
	void encodeQTF(uint32_t id) {

		// extract all parts of the node
		uint32_t T = this->N[id].T;
		uint32_t Ti = T & IBIT; // non-zero if result of `T` should be inverted
		uint32_t Tu = T & ~IBIT; // index to `T` operand
		uint32_t Q = this->N[id].Q;
		uint32_t F = this->N[id].F;

		// assert node is invert normalised
		assert((~Q & IBIT) && (~F & IBIT));

		// decode
		if (T == 0 && F != 0) {
			// LT `"L?0:R"`
			encodeOperand(Q);
			encodeOperand(F);
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '<';
		} else if (T == IBIT && F != 0) {
			// OR `"L?~0:R"`
			encodeOperand(Q);
			encodeOperand(F);
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '+';
		} else if (!Ti && Tu != 0 && F == 0) {
			// AND `"L?R:0"`
			encodeOperand(Q);
			encodeOperand(Tu);
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '&';
		} else if (Ti && Tu != 0 && F == 0) {
			// GT `"L?~R:0"`
			encodeOperand(Q);
			encodeOperand(Tu);
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '>';
		} else if (Ti && Tu != 0 && Tu == F) {
			// XOR `"L?~R:R"`
			encodeOperand(Q);
			encodeOperand(F);
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '^';
		} else if (Ti) {
			// QnTF `"Q?~T:F"`
			encodeOperand(Q);
			encodeOperand(Tu);
			encodeOperand(F);
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '!';
		} else {
			// QnTF `"Q?T:F"`
			encodeOperand(Q);
			encodeOperand(Tu);
			encodeOperand(F);
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '?';
		}

		// mark been there
		/*
		 * @date 2020-03-09 01:54:26
		 *
		 * id and nextNode will be different when the initial call is called with a different entrypoint than the root.
		 * `beenThere[]` is used to calculate back-references.
		 * `beenThere[]` points to the `nodeId` of the source `N[]`
		 * `nextNode` is value it would have when decoding the notation.
		 */
		beenThere[id] = nextNode++;
	}

	/**
	 * Encode a notation describing the tree in "placeholders/transform" notation.
	 * Within the placeholders, endpoints are assigned in order of natural path which can be used as index for the transform to determine the actual endpoint.
	 *
	 * @param {number} id - entrypoint
	 * @param {character[]} pTransform - output map of endpoint placeholders to actual endpoints.
	 * @param {number} transformSize - maximum size of pTransform including string terminator
	 * @return {string} - Constructed notation. State information so no multiple calls with `printf()`.
	 * @date 2020-03-08 20:52:41
	 */
	const char *encode(uint32_t id, bool withPlaceholders) {

		// special case
		if (id == 0) {
			sbuf[0] = '0';
			sbuf[1] = 0;
			return sbuf;
		}
		if (id == IBIT) {
			sbuf[0] = '0';
			sbuf[1] = '~';
			sbuf[2] = 0;
			return sbuf;
		}

		// setup state
		nextPlaceholder = withPlaceholders ? this->kstart : 0;
		nextNode = this->nstart;
		spos = 0;
		memset(beenThere, 0, sizeof(beenThere[0]) * this->count);
		// `beenPlaceholder[]` is a list sized by nextPlaceholder
		placeholdersInSync = true; // assume placeholders are in sync. Implying that no explicit transform is needed

		// encode notation with placeholders
		if ((id & ~IBIT) < this->nstart) {
			// encode endpoint
			encodeOperand(id & ~IBIT);
		} else {
			// encode node
			encodeQTF(id & ~IBIT);

		}

		// optionally append final invert
		if (id & IBIT) {
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '~';
		}

		// if placeholders are in sync with endpoints then transform is redundant
		if (nextPlaceholder > 0 && !placeholdersInSync) {
			// append delimiter
			assert(spos < SBUFMAX - 1);
			sbuf[spos++] = '/';

			// append contents of placeholders
			for (uint32_t ph = this->kstart; ph < nextPlaceholder; ph++) {

				// endpoints are notated as a lowercase letter (`'a'` resembling KSTART) base26 prefixed by uppercase letters
				char prefixStack[16];
				int prefixStackPos = 0;

				// zero-based copy of placeholder
				uint32_t v = beenPlaceholder[ph] - this->kstart;

				// base26 encoded endpoint
				prefixStack[prefixStackPos++] = (char) ('a' + (v % 26));
				v /= 26;
				// base26 encoded prefix
				while (v) {
					prefixStack[prefixStackPos++] = (char) ('A' + (v % 26));
					v /= 26;
				}

				// test if fits
				assert(spos + prefixStackPos + 1 < SBUFMAX - 1);

				// add to notation
				while (prefixStackPos)
					sbuf[spos++] = prefixStack[--prefixStackPos];
			}
		}

		// append string terminator
		sbuf[spos++] = 0;

		// return encoded string
		return sbuf;
	}

	/**
         * Evaluate the tree and store the result in v[]
         *
         * `this->N` contains the unified operators.
         * The parameter of this function `v` is the runtime data to which the operators should be applied.
         *
         * For each entry of `this->N[i]` and `v[i]`:
         * - the unified operator loads the operand data from `v` indicated by `Q`, `T` and `F`
         * - functionality is applied
         * - the result is stored int `v` indexed by the location of the operator
         *
         * Each data entry is a 512-bit wide vector, split into uint64_t chunks.
         * As this is a reference implementation, `SIMD` instructions should be avoided.
         *
	 * @param {vector[]} v - the evaluated result of the unified operators
	 * @date 2020-03-09 19:36:17
	 */
	inline void eval(footprint_t *v) const {
		// for all operators eligible for evaluation...
		for (unsigned i = nstart; i < this->count; i++) {
			// point to the first chunk of the `"question"`
			const uint64_t *Q = v[this->N[i].Q].bits;
			// point to the first chunk of the `"when-true"`
			// NOTE: this can be marked as "value needs be runtime inverted"
			const uint64_t *T = v[this->N[i].T & ~IBIT].bits;
			// point to the first chunk of the `"when-false"`
			const uint64_t *F = v[this->N[i].F].bits;
			// point to the first chunk of the `"result"`
			uint64_t *R = v[i].bits;

			// determine if the operator is `QTF` or `QnTF`
			if (this->N[i].T & IBIT) {
				// `QnTF` for each bit in the chunk, apply the operator `"Q ? !T : F"`
				for (unsigned j = 0; j < QUADPERFOOTPRINT; j++)
					R[j] = (Q[j] & ~T[j]) ^ (~Q[j] & F[j]);
			} else {
				// `QnTF` for each bit in the chunk, apply the operator `"Q ? T : F"`
				for (unsigned j = 0; j < QUADPERFOOTPRINT; j++)
					R[j] = (Q[j] & T[j]) ^ (~Q[j] & F[j]);
			}
		}
	}


};

tree_t *gTree;                    /** @global {tree_t} gTree - worker tree */
footprint_t evalData64[NUMNODES]; /** @global {footprint_t[]} evalData64 - vector data containing results of node operationa */

/**
 * Mainloop called for each program argument
 *
 * @param {string} origPattern - argument to process
 * @return {number} - 0 if something failed, otherwise crc of result
 */
uint32_t mainloop(const char *origPattern) {

	/*
	 * Load notation
	 */
	{
		uint32_t highestEndpoint, numTransform;

		// get visual hiest nstart
		gTree->decodeHighestEndpoint(origPattern, &highestEndpoint, &numTransform, gTree->beenPlaceholder);
		gTree->kstart = KSTART;
		gTree->nstart = gTree->kstart + highestEndpoint + 1;

		// decode with explicit temporary storage for `pTransform`
		if (opt_raw) {
			if (gTree->decodeRaw(origPattern, numTransform, gTree->beenPlaceholder))
				return 0; // decoding failed
		} else {
			if (gTree->decode(origPattern, numTransform, gTree->beenPlaceholder))
				return 0; // decoding failed
		}
	}

	/*
 	 * Extract one of the Q/T/F components
 	 */
	if (opt_Q) {
		if ((gTree->root & ~IBIT) < gTree->nstart) {
			gTree->root = 0; // treee had no nodes
		} else {
			gTree->root = gTree->N[gTree->root & ~IBIT].Q;
			// NOTE: root `IBIT` only applies to `T` and `F`
		}
	} else if (opt_T) {
		if ((gTree->root & ~IBIT) < gTree->nstart) {
			gTree->root = 0; // treee had no nodes
		} else {
			gTree->root = gTree->N[gTree->root & ~IBIT].T ^ (gTree->root & IBIT);
		}
	} else if (opt_F) {
		if ((gTree->root & ~IBIT) < gTree->nstart) {
			gTree->root = 0; // treee had no nodes
		} else {
			gTree->root = gTree->N[gTree->root & ~IBIT].F ^ (gTree->root & IBIT);
		}
	}

	/*
	 * Emit tree as code
	 */
	if (opt_code) {
		printf("({ unsigned _[] = {0U,");

		char prefixStack[16];
		int prefixStackPos = 0;

		/*
		 * emit endpoints
		 */
		for (unsigned i = gTree->kstart; i < gTree->nstart; i++) {
			// endpoints are notated as a lowercase letter (`'a'` resembling KSTART) base26 prefixed by uppercase letters

			// zero-based copy of endpoint
			uint32_t v = i - gTree->kstart;

			// base26 encoded endpoint
			prefixStack[prefixStackPos++] = (char) ('a' + (v % 26));
			v /= 26;
			// base26 encoded prefix
			while (v) {
				prefixStack[prefixStackPos++] = (char) ('A' + (v % 26));
				v /= 26;
			}

			// add to notation
			while (prefixStackPos) {
				putchar(prefixStack[--prefixStackPos]);
				putchar(',');
			}
		}

		/*
		 * Emit nodes
		 */
		for (unsigned i = gTree->nstart; i < gTree->count; i++) {
			if (gTree->N[i].T & IBIT)
				printf("  _[%d]?!_[%d]:_[%d],", gTree->N[i].Q, gTree->N[i].T ^ IBIT, gTree->N[i].F);
			else
				printf("  _[%d]? _[%d]:_[%d],", gTree->N[i].Q, gTree->N[i].T, gTree->N[i].F);
		}

		/*
		 * Emit root
		 */
		if (gTree->root & IBIT)
			printf("}; !_[%d];}) // ", gTree->root & ~IBIT);
		else
			printf("};  _[%d];}) // ", gTree->root);

		/*
		 * Emit notation
		 */

		printf("%s\n", gTree->encode(gTree->root, opt_normalise ? true : false));
		return 0;
	}

	/*
	 * Initialise test vector.
	 *
	 * Example expression stored in tree
	 *
	 * v[0]          | 0b00000000 | null/zero/false
	 * v[1=KSTART+0] | 0b10101010 | `a`
	 * v[2=KSTART+1] | 0b11001100 | `b`
	 * v[3=KSTART+2] | 0b11110000 | `c`
	 * v[4=NSTART+0] | 0b10001000 | ab&
	 * v[5=NSTART+1] | 0b01111000 | ab&c^
	 *
	 * Test vector inputs are in range kstart..nstart and contain all possible states on the input endpoints.
	 * With 512 bit vectors this allows for 9 (`MAXSLOTS`).
	 *
	 * For trees with more endpoints, populate the vector with random values.
	 * If you suspect that that the evaluation result is a false-positive, rerun with a different seed
	 */

	if (gTree->nstart <= (KSTART + MAXSLOTS)) {

		uint64_t *v = (uint64_t *) evalData64;

		// set 64bit slice to zero
		for (int i = 0; i < QUADPERFOOTPRINT * (1 + MAXSLOTS); i++)
			v[i] = 0;

		// set footprint for 64bit slice
		assert(MAXSLOTS == 9);
		for (unsigned i = 0; i < (1 << MAXSLOTS); i++) {
			// v[(i/64)+0*4] should be 0
			if (i & (1 << 0)) v[(i / 64) + 1 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
			if (i & (1 << 1)) v[(i / 64) + 2 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
			if (i & (1 << 2)) v[(i / 64) + 3 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
			if (i & (1 << 3)) v[(i / 64) + 4 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
			if (i & (1 << 4)) v[(i / 64) + 5 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
			if (i & (1 << 5)) v[(i / 64) + 6 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
			if (i & (1 << 6)) v[(i / 64) + 7 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
			if (i & (1 << 7)) v[(i / 64) + 8 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
			if (i & (1 << 8)) v[(i / 64) + 9 * QUADPERFOOTPRINT] |= 1LL << (i % 64);
		}

	} else {
		srand(opt_seed);

		uint64_t *v = (uint64_t *) evalData64;

		// craptastic random fill
		for (unsigned i = 0; i < QUADPERFOOTPRINT * gTree->nstart; i++) {
			v[i] = (uint64_t) rand();
			v[i] = (v[i] << 16) ^ (uint64_t) rand();
			v[i] = (v[i] << 16) ^ (uint64_t) rand();
			v[i] = (v[i] << 16) ^ (uint64_t) rand();
		}
	}

#if 0
	for (unsigned j = 0; j < gTree->nstart; j++) {
		printf("%2d: ", j);
		for (int i = 0; i < QUADPERFOOTPRINT; i++)
			printf("%016lx ", evalData64[j].bits[i]);
		printf("\n");
	}
#endif

	/*
	 * Evaluate tree
	 */
	gTree->eval(evalData64);

	/*
	 * Calculate crc of entry point
	 */
	uint64_t crc64 = 0;
	if (gTree->root & IBIT) {
		for (int i = 0; i < QUADPERFOOTPRINT; i++)
			__asm__ __volatile__ ("crc32q %1, %0" : "+r"(crc64) : "rm"(evalData64[gTree->root & ~IBIT].bits[i] ^ ~0LL));
	} else {
		for (int i = 0; i < QUADPERFOOTPRINT; i++)
			__asm__ __volatile__ ("crc32q %1, %0" : "+r"(crc64) : "rm"(evalData64[gTree->root].bits[i]));
	}

	/*
	 * if quiet only return crc
	 */
	if (opt_quiet)
		return (uint32_t) (crc64 & 0xffffffff);

	/*
	 * Output result of test vector prefixed with sign indicating if root is inverted
	 */
	printf("%c", (gTree->root & IBIT) ? '-' : '+');
	for (int i = 0; i < QUADPERFOOTPRINT; i++)
		printf("%016lx ", evalData64[gTree->root & ~IBIT].bits[i]);

	printf("{%08lx} ", crc64);

	/*
	 * Output tree
	 */
	printf(": %16s", gTree->encode(gTree->root, opt_normalise ? true : false));

	/*
	 * Output number of nodes and determine how many nodes if tree were flat
	 */
	printf(" [NUMEL=%d]", gTree->count - gTree->nstart);

	{
		// sum weights of roots
		double *weight = (double *) malloc(sizeof(double) * gTree->count);
		assert(weight);

		/*
		 * Collect data
		 */
		for (uint32_t i = 0; i < gTree->nstart; i++)
			weight[i] = 0;
		for (uint32_t i = gTree->nstart; i < gTree->count; i++) {
			uint32_t Q = gTree->N[i].Q;
			uint32_t T = gTree->N[i].T & ~IBIT; // IBIT removed
			uint32_t F = gTree->N[i].F;

			// weight = node plus weight of subtrees. Terminals count as 0
			weight[i] = 1 + weight[Q];
			if (T != Q)
				weight[i] += weight[T];
			if (F != Q && F != T)
				weight[i] += weight[F]; // xor counts once
		}

		printf(" [VCOUNT=%f]", weight[gTree->root & ~IBIT]);

		free(weight);
	}

	printf("\n");
	return (uint32_t) (crc64 & 0xffffffff);
}

/**
 * Program main entry point
 *
 * @param  {number} argc - number of arguments
 * @param  {string[]} argv - program arguments
 * @return {number} - 0 on normal return, non-zero when attention is required
 * @date   2020-03-06 20:22:23
 */
int main(int argc, char *const *argv) {
	setlinebuf(stdout);

	/*
	 *  Process program options
	 */
	for (;;) {
		// Long option shortcuts
		enum {
			// short opts
			LO_SEED = 1,
			LO_QNTF,
			LO_RAW,
			// long opts
			LO_HELP = 'h',
			LO_QUIET = 'q',
			LO_VERBOSE = 'v',
			LO_NORMALISE = 'n',
			LO_CODE = 'c',
			LO_Q = 'Q',
			LO_T = 'T',
			LO_F = 'F',
		};

		// long option descriptions
		static struct option long_options[] = {
			/* name, has_arg, flag, val */
			{"help",      0, 0, LO_HELP},
			{"quiet",     0, 0, LO_QUIET},
			{"verbose",   0, 0, LO_VERBOSE},
			{"normalise", 0, 0, LO_NORMALISE},
			{"code",      0, 0, LO_CODE},
			{"raw",       0, 0, LO_RAW},
			{"qntf",      0, 0, LO_QNTF},
			{"seed",      1, 0, LO_SEED},
			{"Q",         0, 0, LO_Q},
			{"T",         0, 0, LO_T},
			{"F",         0, 0, LO_F},

			{NULL,        0, 0, 0}
		};

		char optstring[128], *cp;
		cp = optstring;

		/* construct optarg */
		for (int i = 0; long_options[i].name; i++) {
			if (isalpha(long_options[i].val)) {
				*cp++ = (char) long_options[i].val;

				if (long_options[i].has_arg != 0)
					*cp++ = ':';
				if (long_options[i].has_arg == 2)
					*cp++ = ':';
			}
		}
		*cp = '\0';

		// parse long options
		int option_index = 0;
		int c = getopt_long(argc, argv, optstring, long_options, &option_index);
		if (c == -1)
			break;

		switch (c) {
			case LO_HELP:
				usage(argv, true);
				exit(0);
			case LO_QUIET:
				opt_quiet++;
				break;
			case LO_VERBOSE:
				opt_verbose++;
				break;
			case LO_NORMALISE:
				opt_normalise++;
				break;
			case LO_CODE:
				opt_code++;
				break;
			case LO_RAW:
				opt_raw++;
				break;
			case LO_QNTF:
				opt_qntf++;
				break;
			case LO_SEED:
				opt_seed = strtoul(optarg, NULL, 10);
				break;

			case LO_Q:
				opt_Q++;
				break;
			case LO_T:
				opt_T++;
				break;
			case LO_F:
				opt_F++;
				break;

			case '?':
				fprintf(stderr, "Try `%s --help' for more information.\n", argv[0]);
				exit(1);
			default:
				fprintf(stderr, "getopt returned character code %d\n", c);
				exit(1);
		}
	}

	// At least one program argument
	if (argc - optind < 1) {
		usage(argv, false);
		exit(1);
	}

	// create tree.
	gTree = new tree_t(KSTART, KSTART);

	// storage for testing difference between arguments
	uint32_t crc32;
	bool differ = false;

	for (int iArg = optind; iArg < argc; iArg++) {
		const char *pName = argv[iArg];

		if (pName[0] != '-' || pName[1] != 0) {
			// read from arg
			if (iArg == optind)
				crc32 = mainloop(pName);
			else
				differ |= (crc32 != mainloop(pName));
		} else {
			// read from stdin
			char *pBuffer = (char *) malloc(10000000);
			size_t rval = fread(pBuffer, 1, 10000000, stdin);
			if (rval == 10000000) {
				fprintf(stderr, "stdin too long\n");
				exit(1);
			}
			pBuffer[rval] = 0;
			mainloop(pBuffer);
			free(pBuffer);
		}

	}

	// compare crc is multiple patterns given
	if (argc - optind > 1) {
		if (differ) {
			fprintf(stderr, "crc DIFFER\n");
			exit(1);
		} else if (!opt_quiet) {
			fprintf(stderr, "crc same\n");
		}
	}

	return 0;
}
